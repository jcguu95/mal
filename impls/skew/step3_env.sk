def READ(str string) MalVal {
  return read_str(str)
}

def EVAL(ast MalVal, env Env) MalVal {
  const dbgeval = env.get("DEBUG-EVAL")
  if dbgeval != null && !(dbgeval is MalNil) && !(dbgeval is MalFalse) {
    printLn("EVAL: " + PRINT(ast))
  }

  if ast is MalSymbol {
    const key = (ast as MalSymbol).val
    const val = env.get(key)
    if val == null { throw MalError.new("'" + key + "' not found") }
    return val
  } else if ast is MalList {
    # proceed further after this conditional
  } else if ast is MalVector {
    return MalVector.new((ast as MalVector).val.map<MalVal>(e => EVAL(e, env)))
  } else if ast is MalHashMap {
    var result List<MalVal> = []
    (ast as MalHashMap).val.each((k string, v MalVal) => {
      result.append(MalVal.fromHashKey(k))
      result.append(EVAL(v, env))
    })
    return MalHashMap.fromList(result)
  } else {
    return ast
  }

  const astList = ast as MalList
  if astList.isEmpty { return ast }
  const a0sym = astList[0] as MalSymbol
  if a0sym.val == "def!" {
    return env.set(astList[1] as MalSymbol, EVAL(astList[2], env))
  } else if a0sym.val == "let*" {
    var letenv = Env.new(env)
    const assigns = astList[1] as MalSequential
    for i = 0; i < assigns.count; i += 2 {
      letenv.set(assigns[i] as MalSymbol, EVAL(assigns[i + 1], letenv))
    }
    return EVAL(astList[2], letenv)
  } else {
    const evaledList = astList.val.map<MalVal>(e => EVAL(e, env))
    const fn = evaledList[0] as MalNativeFunc
    return fn.call(evaledList.slice(1))
  }
}

def PRINT(exp MalVal) string {
  return exp?.print(true)
}

var repl_env = Env.new(null)

def REP(str string) string {
  return PRINT(EVAL(READ(str), repl_env))
}

@entry
def main {
  repl_env.set(MalSymbol.new("+"), MalNativeFunc.new((args List<MalVal>) MalVal => MalNumber.new((args[0] as MalNumber).val + (args[1] as MalNumber).val)))
  repl_env.set(MalSymbol.new("-"), MalNativeFunc.new((args List<MalVal>) MalVal => MalNumber.new((args[0] as MalNumber).val - (args[1] as MalNumber).val)))
  repl_env.set(MalSymbol.new("*"), MalNativeFunc.new((args List<MalVal>) MalVal => MalNumber.new((args[0] as MalNumber).val * (args[1] as MalNumber).val)))
  repl_env.set(MalSymbol.new("/"), MalNativeFunc.new((args List<MalVal>) MalVal => MalNumber.new((args[0] as MalNumber).val / (args[1] as MalNumber).val)))

  var line string
  while (line = readLine("user> ")) != null {
    if line == "" { continue }
    try {
      printLn(REP(line))
    }
    catch e MalError {
      printLn("Error: \(e.message)")
    }
  }
}
