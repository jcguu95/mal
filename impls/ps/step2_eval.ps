/runlibfile where { pop }{ /runlibfile { run } def } ifelse % 
(types.ps) runlibfile
(reader.ps) runlibfile
(printer.ps) runlibfile

% read
/_readline { print flush (%stdin) (r) file 1024 string readline } def

/READ {
    /str exch def
    str read_str
} def


% eval
/EVAL { 3 dict begin
    /env exch def
    /ast exch def

    %(eval_ast: ) print ast ==

    ast _symbol? { %if symbol
        env ast known {
            env ast get
        }{
            (') ast
            dup length string cvs
            (' not found)
            concatenate concatenate
            _throw
        } ifelse
    }{

    ast _vector? {
        [
            ast /data get { %forall items
                env EVAL
            } forall
        ] _vector_from_array
    }{

    ast _hash_map? {
        <<
            ast /data get { %forall entries
                env EVAL
            } forall
        >> _hash_map_from_dict
    }{

    ast _list? not {
        ast
    }{

    ast _count 0 eq {
        ast
    }{

        /a0 ast 0 _nth def

            a0 env EVAL

            [ ast _rest /data get { env EVAL } forall ] _list_from_array exch
            exec % apply function to args

    } ifelse } ifelse } ifelse } ifelse } ifelse
end } def


% print
/PRINT {
    true _pr_str
} def


% repl
/repl_env <<
    (+) { dup 0 _nth exch 1 _nth add }
    (-) { dup 0 _nth exch 1 _nth sub }
    (*) { dup 0 _nth exch 1 _nth mul }
    (/) { dup 0 _nth exch 1 _nth idiv }
>> def

/REP { READ repl_env EVAL PRINT } def

% repl loop
{ %loop
    (user> ) _readline
    not { exit } if  % exit if EOF

    { %try
        REP print (\n) print
    } stopped {
        (Error: ) print
        get_error_data false _pr_str print (\n) print
        $error /newerror false put
        $error /errorinfo null put
        clear
        cleardictstack
    } if
} bind loop

(\n) print  % final newline before exit for cleanliness
quit
