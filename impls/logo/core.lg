make "global_exception []

to equal_q :a :b
case obj_type :a [
  [[list vector]
    if not memberp obj_type :b [list vector] [output "false]
    make "a seq_val :a
    make "b seq_val :b
    if notequalp count :a count :b [output "false]
    (foreach :a :b [if not equal_q ?1 ?2 [output "false]])
    output "true
  ]
  [[map]
    if "map <> obj_type :b [output "false]
    localmake "ka map_keys :a
    localmake "kb map_keys :b
    if notequalp count :ka count :kb [output "false]
    (foreach :ka map_vals :a [if not equal_q map_get :b ?1 ?2 [output "false]])
    output "true
  ]
  [else output :a = :b]
]
end

to |mal_=| :a :b
output bool_to_mal equal_q :a :b
end

to mal_throw :a
make "global_exception :a
(throw "error "_mal_exception_)
end

to mal_nil? :a
output bool_to_mal ((obj_type :a) = "nil)
end

to mal_true? :a
output bool_to_mal ((obj_type :a) = "true)
end

to mal_false? :a
output bool_to_mal ((obj_type :a) = "false)
end

to mal_string? :a
output bool_to_mal ((obj_type :a) = "string)
end

to mal_symbol :a
output symbol_new string_val :a
end

to mal_symbol? :a
output bool_to_mal ((obj_type :a) = "symbol)
end

to mal_keyword :a
output ifelse "keyword = obj_type :a ":a [keyword_new string_val :a]
end

to mal_keyword? :a
output bool_to_mal ((obj_type :a) = "keyword)
end

to mal_number? :a
output bool_to_mal ((obj_type :a) = "number)
end

to mal_fn? :a
output bool_to_mal memberp obj_type :a [fn nativefn]
end

to mal_macro? :a
output bool_to_mal "macro = obj_type :a
end

to |mal_pr-str| [:args]
output string_new pr_seq :args "true "| |
end

to mal_str [:args]
output string_new pr_seq :args "false "
end

to mal_prn [:args]
print pr_seq :args "true "| |
output nil_new
end

to mal_println [:args]
print pr_seq :args "false "| |
output nil_new
end

to |mal_read-string| :str
output read_str string_val :str
end

to mal_readline :prompt
localmake "line readline string_val :prompt
if :line=[] [output nil_new]
output string_new :line
end

to mal_slurp :str
localmake "filename string_val :str
openread :filename
setread :filename
localmake "content "
until [eofp] [
  make "content word :content readchar
]
close :filename
output string_new :content
end

to |mal_<| :a :b
output bool_to_mal lessp number_val :a number_val :b
end

to |mal_<=| :a :b
output bool_to_mal lessequalp number_val :a number_val :b
end

to |mal_>| :a :b
output bool_to_mal greaterp number_val :a number_val :b
end

to |mal_>=| :a :b
output bool_to_mal greaterequalp number_val :a number_val :b
end

to |mal_+| :a :b
output number_new sum number_val :a number_val :b
end

to |mal_-| :a :b
output number_new difference number_val :a number_val :b
end

to |mal_*| :a :b
output number_new product number_val :a number_val :b
end

to |mal_/| :a :b
output number_new quotient number_val :a number_val :b
end

to |mal_time-ms|
; Native function timems is added to coms.c (see Dockerfile)
output number_new timems
end

to mal_list [:args]
output list_new :args
end

to mal_list? :a
output bool_to_mal ((obj_type :a) = "list)
end

to mal_vector [:args]
output vector_new :args
end

to mal_vector? :a
output bool_to_mal ((obj_type :a) = "vector)
end

to |mal_hash-map| [:pairs]
output map_assoc :map_empty :pairs
end

to mal_map? :a
output bool_to_mal "map = obj_type :a
end

to mal_assoc :map [:args]
output map_assoc :map :args
end

to mal_get :map :key
if "nil = obj_type :map [output nil_new]
localmake "val map_get :map :key
if "notfound = obj_type :val [output nil_new]
output :val
end

to mal_contains? :m :k
output bool_to_mal "notfound <> obj_type map_get :m :k
end

to mal_keys :map
output list_new map_keys :map
end

to mal_vals :map
output list_new map_vals :map
end

to mal_sequential? :a
output bool_to_mal memberp obj_type :a [list vector]
end

to mal_cons :a :b
output list_new fput :a seq_val :b
end

to mal_concat [:args]
output list_new map.se "seq_val :args
end

to mal_vec :s
output vector_new seq_val :s
end

to mal_nth :a :i
make "a seq_val :a
make "i number_val :i
if or (:i < 0) (:i >= count :a) [(throw "error [nth: index out of range])]
output item (:i + 1) :a
end

to mal_first :a
if "nil = obj_type :a [output nil_new]
make "a seq_val :a
output ifelse emptyp :a "nil_new [first :a]
end

to mal_rest :a
if "nil = obj_type :a [output list_new []]
make "a seq_val :a
output list_new ifelse emptyp :a [[]] [butfirst :a]
end

to mal_empty? :a
output bool_to_mal emptyp seq_val :a
end

to mal_count :a
output number_new ifelse "nil = obj_type :a 0 [count seq_val :a]
end

to mal_apply :f [:args]
localmake "callargs map.se [ifelse emptyp ?rest [seq_val ?] [(list ?)]] :args
output invoke_fn :f :callargs
end

to mal_map :f :seq
output list_new map [invoke_fn :f (list ?)] seq_val :seq
end

to mal_conj :a0 [:rest]
case obj_type :a0 [
  [[list]   localmake "newlist seq_val :a0
            foreach :rest [make "newlist fput ? :newlist]
            output list_new :newlist]
  [[vector] output vector_new sentence seq_val :a0 :rest]
  [else     (throw "error [conj requires list or vector]) ]
]
end

to mal_seq :a
case obj_type :a [
  [[string]
    make "a string_val :a
    if emptyp :a [output nil_new]
    localmake "chars []
    for [i [count :a] 1 -1] [ make "chars fput string_new item :i :a :chars ]
    output list_new :chars ]
  [[list]
    if emptyp seq_val :a [output nil_new]
    output :a ]
  [[vector]
    make "a seq_val :a
    if emptyp :a [output nil_new]
    output list_new :a ]
  [[nil] output nil_new ]
  [else (throw "error [seq requires string or list or vector or nil]) ]
]
end

to mal_atom? :a
output bool_to_mal ((obj_type :a) = "atom)
end

to invoke_fn :f :callargs
output case obj_type :f [
  [[nativefn]
    nativefn_apply :f :callargs ]
  [[fn]
    fn_apply       :f :callargs ]
  [[macro]
    macro_apply    :f :callargs ]
  [else
    (throw "error [Wrong type for apply])]
]
end

to mal_swap! :atom :f [:args]
localmake "callargs fput mal_deref :atom :args
output mal_reset! :atom invoke_fn :f :callargs
end

to logo_to_mal :a
output cond [
  [[memberp :a [true false]] bool_to_mal :a]
  [[numberp :a]  number_new :a]
  [[wordp :a]    string_new :a]
  [[listp :a]    list_new map "logo_to_mal :a]
  [else          nil_new]
]
end

to |mal_logo-eval| :str
localmake "res runresult string_val :str
if emptyp :res [output nil_new]
output logo_to_mal first :res
end

make "core_ns [
  = throw

  nil? true? false? string? symbol symbol? keyword keyword? number?
  fn? macro?

  pr-str str prn println read-string readline slurp

  < <= > >= + - * / time-ms

  list list? vector vector? hash-map map? assoc dissoc get contains?
  keys vals

  sequential? cons concat vec nth first rest empty? count apply map

  conj seq

  meta with-meta atom atom? deref reset! swap!

  logo-eval mal_logo_eval
]
