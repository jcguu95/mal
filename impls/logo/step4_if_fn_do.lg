load "../logo/readline.lg
load "../logo/reader.lg
load "../logo/printer.lg
load "../logo/types.lg
load "../logo/env.lg
load "../logo/core.lg

to _read :str
output read_str :str
end

to _eval :ast :env
if not memberp obj_type env_get :env symbol_new "DEBUG-EVAL [false nil notfound] [
  (print "EVAL: _print :ast "/ map "_print env_keys :env)
]

case obj_type :ast [

  [[symbol]
    localmake "val env_get :env :ast
    if "notfound = obj_type :val [
      (throw "error sentence (word "' symbol_value :ast "') [not found])
    ]
    output :val
  ]

  [[vector] output vector_new map [_eval ? :env] seq_val :ast]

  [[map] output map_map [_eval ? :env] :ast]

  [[list]
    make "ast seq_val :ast
    if emptyp :ast [output list_new []]
    localmake "a0 first :ast
    make "ast butfirst :ast
    case ifelse "symbol = obj_type :a0 [symbol_value :a0] "" [

    [[def!]
      localmake "a1 first :ast
      localmake "a2 item 2 :ast
      localmake "val _eval :a2 :env
      env_set :env :a1 :val
      output :val ]

    [[let*]
      localmake "a1 first :ast
      localmake "letenv env_new :env [] []
      foreach seq_val first :ast [
        if 1 = modulo # 2 [
          env_set :letenv ? _eval first ?rest :letenv
        ]
      ]
      output _eval item 2 :ast :letenv ]

    [[do]
      foreach :ast [
        ifelse emptyp ?rest [output _eval ? :env] [ignore _eval ? :env]
      ]
    ]

    [[if]
      localmake "a1 first :ast
      localmake "cond _eval :a1 :env
      case obj_type :cond [
        [[nil false] ifelse 3 = count :ast [
                       output _eval item 3 :ast :env
                     ] [
                       output nil_new
                     ]]
        [else        output _eval item 2 :ast :env]
      ]]

    [[fn*]
      output fn_new seq_val first :ast :env item 2 :ast ]

    [else
      localmake "f _eval :a0 :env
      case obj_type :f [
        [[nativefn]
          output nativefn_apply :f map [_eval ? :env] :ast ]
        [[fn]
         output _eval fn_body :f fn_gen_env :f map [_eval ? :env] :ast ]
        [else
          (throw "error [Wrong type for apply])]
      ] ]
    ]
  ]
  [else output :ast]
]
end

to _print :exp
output pr_str :exp "true
end

to re :str
ignore _eval _read :str :repl_env
end

to rep :str
output _print _eval _read :str :repl_env
end

to print_exception :exception
if not emptyp :exception [
  (print "Error: item 2 :exception)
]
end

to repl
do.until [
    localmake "line readline "|user> |
    if not emptyp :line [
      catch "error [print rep :line]
      print_exception error
    ]
] [:line = []]
(print)
end

; core_ns
make "repl_env env_new [] [] []
foreach :core_ns [
  env_set :repl_env symbol_new ? nativefn_new word "mal_ ?
]

; core.mal: defined using the language itself
re "|(def! not (fn* (a) (if a false true)))|

repl
bye
