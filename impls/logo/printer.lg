to pr_str :exp :readable
output case obj_type :exp [
  [[nil]      "nil]
  [[true]     "true]
  [[false]    "false]
  [[number]   number_val :exp]
  [[symbol]   symbol_value :exp]
  [[keyword]  word ": keyword_val :exp]
  [[string]   print_string string_val :exp :readable]
  [[list]     (word "\( pr_seq seq_val :exp :readable "| | "\) ) ]
  [[vector]   (word "\[ pr_seq seq_val :exp :readable "| | "\] ) ]
  [[map]      (word "\{ pr_seq (map.se [list ?1 ?2] map_keys :exp
                map_vals :exp) :readable "| | "\} ) ]
  [[atom]     (word "|(atom | pr_str mal_deref :exp "true "\) ) ]
  [[nativefn] "#<NativeFunction>]
  [[fn]       "#<Function> ]
  [[macro]    "#<Macro> ]
  [else       (throw "error (sentence [unknown type] obj_type :exp))]
]
end

to escape_string :s
output map [
    case rawascii ? [
      [[34 92] word "\\ ?]
      [[10]    "\\n]
      [else    ?]
    ]
  ] :s
end

to print_string :exp :readable
ifelse :readable [
  output (word "\" escape_string :exp "\" )
] [
  output :exp
]
end

to pr_seq :seq :readable :delim_char
output apply "word map [
  ifelse # = 1 [pr_str ? :readable] [word :delim_char pr_str ? :readable]
] :seq
end
