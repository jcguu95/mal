; LOGO, variables defined in a procedure are visible from called
; procedures.  Use this quirk to pass the current parser status.
; str:  the parsed string (constant)
; cnt:  its length        (constant)
; idx:  the currently parsed index, or cnt + 1

make "new_line_char char 10
make "forbidden_chars (word :new_line_char char 13 "| "(),;[\\]{}|)
make "separator_chars (word :new_line_char "| ,|)

to read_allowed_chars
localmake "res "
while [:idx <= :cnt] [
  localmake "c item :idx :str
  if memberp :c :forbidden_chars [output :res]
  make "idx :idx + 1
  make "res word :res :c
]
output :res
end

to skip_separators
while [:idx <= :cnt] [
  localmake "c item :idx :str
  cond [
    [[:c = "|;|]
      do.until [
        make "idx :idx + 1
        if :cnt < :idx "stop
      ] [:new_line_char = item :idx :str]
    ]
    [[not memberp :c :separator_chars] stop]
  ]
  make "idx :idx + 1
]
end

to read_string
localmake "res "
while [:idx <= :cnt] [
  localmake "c item :idx :str
  make "idx :idx + 1
  if :c = "" [output :res]
  if :c = "\\ [
    if :cnt < :idx [(throw "error [unbalananced ""])]
    make "c item :idx :str
    make "idx :idx + 1
    if :c = "n [make "c :new_line_char]
  ]
  make "res word :res :c
]
(throw "error [unbalanced ""])
end

to read_symbol
localmake "token word :c read_allowed_chars
output cond [
  [[:token = "nil]               nil_new]
  [[memberp :token [false true]] bool_to_mal :token]
  [[numberp :token]              number_new :token]
  [else                          symbol_new :token]
]
end

to read_seq :end_char
localmake "res []
forever [
  skip_separators
  if :cnt < :idx [(throw "error (sentence "EOF, "expected :end_char))]
  if :end_char = item :idx :str [
    make "idx :idx + 1
    ; reversing once is more efficient than successive lputs.
    output reverse :res
  ]
  make "res fput read_form :res
]
end

to reader_macro :symbol_name
output list_new list symbol_new :symbol_name read_form
end

to with_meta_reader_macro
localmake "meta read_form
output list_new (list symbol_new "with-meta read_form :meta)
end

to read_unquote
if :idx <= :cnt [if "@ = item :idx :str [
  make "idx :idx + 1
  output reader_macro "splice-unquote
]]
output reader_macro "unquote
end

to read_form
skip_separators
if :cnt < :idx [(throw "error [EOF, expected a form])]
localmake "c item :idx :str
make "idx :idx + 1
output case :c [
  ['     reader_macro "quote ]
  [`     reader_macro "quasiquote ]
  [~     read_unquote ]
  [^     with_meta_reader_macro ]
  [@     reader_macro "deref ]
  [|(|   list_new read_seq "|)|]
  [|[|   vector_new read_seq "|]|]
  [|{|   map_assoc :map_empty read_seq "|}|]
  [|)]}| (throw "error (sentence "unexpected "' :c "'))]
  ["     string_new read_string]
  [:     keyword_new read_allowed_chars]
  [else  read_symbol ]
]
end

to read_str :str
localmake "idx 1
localmake "cnt count :str
output read_form
end
