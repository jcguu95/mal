load "../logo/readline.lg
load "../logo/reader.lg
load "../logo/printer.lg
load "../logo/types.lg
load "../logo/env.lg

to _read :str
output read_str :str
end

to _eval :ast :env
if not memberp obj_type env_get :env symbol_new "DEBUG-EVAL [false nil notfound] [
  (print "EVAL: _print :ast "/ map "_print env_keys :env)
]

case obj_type :ast [

  [[symbol]
    localmake "val env_get :env :ast
    if "notfound = obj_type :val [
      (throw "error sentence (word "' symbol_value :ast "') [not found])
    ]
    output :val
  ]

  [[vector] output vector_new map [_eval ? :env] seq_val :ast]

  [[map] output map_map [_eval ? :env] :ast]

  [[list]
    make "ast seq_val :ast
    if emptyp :ast [output list_new []]
    localmake "a0 first :ast
    make "ast butfirst :ast
    case ifelse "symbol = obj_type :a0 [symbol_value :a0] "" [

    [[def!]
      localmake "a1 first :ast
      localmake "a2 item 2 :ast
      localmake "val _eval :a2 :env
      env_set :env :a1 :val
      output :val ]

    [[let*]
      localmake "a1 first :ast
      localmake "letenv env_new :env [] []
      foreach seq_val first :ast [
        if 1 = modulo # 2 [
          env_set :letenv ? _eval first ?rest :letenv
        ]
      ]
      output _eval item 2 :ast :letenv ]

    [else
      localmake "f _eval :a0 :env
      output nativefn_apply :f map [_eval ? :env] :ast ]
    ]
  ]
  [else output :ast]
]
end

to _print :exp
output pr_str :exp "true
end

to rep :str
output _print _eval _read :str :repl_env
end

to mal_add :a :b
output number_new ((number_val :a) + (number_val :b))
end

to mal_sub :a :b
output number_new ((number_val :a) - (number_val :b))
end

to mal_mul :a :b
output number_new ((number_val :a) * (number_val :b))
end

to mal_div :a :b
output number_new ((number_val :a) / (number_val :b))
end

to print_exception :exception
if not emptyp :exception [
  (print "Error: item 2 :exception)
]
end

to repl
do.until [
    localmake "line readline "|user> |
    if not emptyp :line [
      catch "error [print rep :line]
      print_exception error
    ]
] [:line = []]
(print)
end

make "repl_env env_new [] map "symbol_new   [+       -       *       /      ] ~
                          map "nativefn_new [mal_add mal_sub mal_mul mal_div]

repl
bye
