; Make Logo's string-comparison case sensitive
make "caseignoredp "false

; Load the 'case' library macro
case "dummy []

; Redefine 'case' macro to not override caseignoredp
.macro case :case.value :case.clauses
catch "case.error [output case.helper :case.value :case.clauses]
(throw "error [Empty CASE clause])
end

; For efficiency of env_get and map_get, ensure that MAL equality
; (equal_q) and LOGO equality (equalp/=) return the same result when
; an argument is neither a list, map, vector or atom.

to obj_type :obj
output ifelse wordp :obj ""number [item 1 :obj]
end

to list_new :val
output list "list :val
end

to vector_new :val
output list "vector :val
end

to seq_val :obj
output item 2 :obj
end

to |mal_with-meta| :obj :meta
output (listtoarray fput :meta ifelse listp :obj [
  :obj
] [
  butfirst arraytolist :obj
] 0)
end

to mal_meta :obj
output ifelse listp :obj "nil_new [item 0 :obj]
end

; Convenient for map_get and env_get.

make "global_notfound [notfound]

to notfound_new
output :global_notfound
end

make "global_nil [nil]

to nil_new
output :global_nil
end

make "global_false [false]
make "global_true [true]

to bool_to_mal :bool
output ifelse :bool ":global_true ":global_false
end

to number_new :val
output :val
end

to number_val :obj
output :obj
end

to symbol_new :name
output list "symbol :name
end

to symbol_value :obj
output item 2 :obj
end

to keyword_new :val
output list "keyword :val
end

to keyword_val :obj
output item 2 :obj
end

to string_new :val
output list "string :val
end

to string_val :obj
output item 2 :obj
end

to nativefn_new :f
output list "nativefn :f
end

to nativefn_apply :fn :args
output apply item 2 :fn :args
end

make "map_empty [map [] []]

to map_get :map :key
foreach item 2 :map [if ? = :key [output item # item 3 :map]]
output notfound_new
end

; Returns a new list with the key-val pair set
to map_assoc :map :pairs
foreach :pairs [
  if 1 = modulo # 2 [
    if memberp ? item 2 :map [make "map (mal_dissoc :map ?)]
    make "map (list "map fput ? item 2 :map fput first ?rest item 3 :map)
  ]
]
output :map
end

; Returns a new list without the key-val pair set
to mal_dissoc :map [:removals]
localmake "keys []
localmake "vals []
(foreach item 2 :map item 3 :map [
  if not memberp ?1 :removals [
    make "keys fput ?1 :keys
    make "vals fput ?2 :vals
  ]
])
output (list "map :keys :vals)
end

to map_keys :map
output item 2 :map
end

to map_vals :map
output item 3 :map
end

to map_map :fn :map
output (list "map item 2 :map map :fn item 3 :map)
end

to fn_new :args :env :body
localmake "i difference count :args 1
if 0 < :i [if equalp symbol_new "& item :i :args [
  output (list "fn :env :body :i filter [# <> :i] :args)
]]
output (list "fn :env :body 0 :args)
end

to fn_gen_env :fn :args
localmake "varargs item 4 :fn
if :varargs = 0 [output env_new item 2 :fn item 5 :fn :args]
if :varargs = 1 [output env_new item 2 :fn item 5 :fn (list list_new :args)]
localmake "new_args array :varargs
foreach :args [
  .setitem # :new_args ?
  if :varargs = # + 1 [
    .setitem :varargs :new_args list_new ?rest
    output env_new item 2 :fn item 5 :fn :new_args
  ]
]
(throw "error [not enough arguments for vararg function])
end

to fn_apply :fn :args
output _eval item 3 :fn fn_gen_env :fn :args
end

to fn_env :fn
output item 2 :fn
end

to fn_body :fn
output item 3 :fn
end

to macro_new :fn
output list "macro :fn
end

to macro_apply :fn :args
output fn_apply item 2 :fn :args
end

to mal_atom :value
output listtoarray list "atom :value
end

to mal_deref :a
output item 2 :a
end

to mal_reset! :a :val
.setitem 2 :a :val
output :val
end
