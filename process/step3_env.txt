--- step3_env -----------------------------------
import types, reader, printer, env

READ(str): return reader.read_str(str)

EVAL(ast, env):
  if env.get('DEBUG-EVAL) exists and not in nil, false then prn('EVAL ast)
  match ast:
    'key:                     return env.get(key) or raise "'{key}' not found"
    [form1 ..]:               return [EVAL(form1, env) ..]
    {key1 value1 ..}:         return {key1 EVAL(value1, env) ..}
    ('def! 'key value):       return env.set(key, EVAL(value, env))
    ('let* (k1 v1 ..) form):  env = new Env(env)
                              env.set(k1, EVAL(v1, env))
                              ..
                              return EVAL(form, env)
    ('let* [k1 v1 ..] form):  // idem
    (callable arg1 ..):       f = EVAL(callable, env)
                              args = [EVAL(arg1, env) ..]
                              return f(args)
    otherwise:                return ast

PRINT(exp): return printer.pr_str(exp)

repl_env = new Env()
rep(str): return PRINT(EVAL(READ(str),repl_env))

repl_env.set('+, add_fn)
    ...

main loop:
  try:      println(rep(readline("user> ")))
  catch e:  println("Error: ", e)

--- env module ----------------------------------
class Env (outer=null)
    data = hash_map()
  set(k,v): return data.set(k,v)
  get(k): return data.has(k) ? data.get(k) : (outer ? outer.get(k) : null)
