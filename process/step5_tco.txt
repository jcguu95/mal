--- step5_tco -----------------------------------
import types, reader, printer, env, core

READ(str): return reader.read_str(str)

EVAL(ast, env):
 loop:
  if env.get('DEBUG-EVAL) exists and not in nil, false then prn('EVAL ast)
  match ast:
    'key:                     return env.get(key) or raise "'{key}' not found"
    [form1 ..]:               return [EVAL(form1, env) ..]
    {key1 value1 ..}:         return {key1 EVAL(value1, env) ..}
    ('def! 'key value):       return env.set(key, EVAL(value, env))
    ('let* (k1 v1 ..) form):  env = new Env(env)
                              env.set(k1, EVAL(v1, env))
                              ..
                              ast = form; continue
    ('let* [k1 v1 ..] form):  // idem
    ('do form1 .. last):      EVAL(form1, env)
                              ..
                              ast = last; continue
    ('if cond yes no):        if EVAL(cond, env) in nil, false
                                then ast = yes; continue
                                else ast = no;  continue
    ('if cond yes):           // idem with return nil in the else branch
    ('fn* ('key1 ..) impl):   return new MalFn(env, impl, parm=[key1 ..])
    ('fn* ['key1 ..] impl):   // idem
    (callable arg1 ..):       f = EVAL(callable, env)
                              args = [EVAL(arg1, env) ..]
                              if malfn?(f) then:
                                env = new Env(f.env, f.parm, args)
                                ast = f.impl; continue
                              return f(args)
    otherwise:                return ast

PRINT(exp): return printer.pr_str(exp)

repl_env = new Env()
rep(str): return PRINT(EVAL(READ(str),repl_env))

;; core.EXT: defined using the host language.
core.ns.map((k,v) -> (repl_env.set(k, v)))

;; core.mal: defined using the language itself
rep("(def! not (fn* (a) (if a false true)))")

main loop:
  try:      println(rep(readline("user> ")))
  catch e:  println("Error: ", e)

--- env module ----------------------------------
class Env (outer=null,binds=[],exprs=[])
    data = hash_map()
    foreach b, i in binds:
      if binds[i] == '&: data[binds[i+1]] = exprs.drop(i); break
      else: data[binds[i]] = exprs[i]
  set(k,v): return data.set(k,v)
  get(k): return data.has(k) ? data.get(k) : (outer ? outer.get(k) : null)

--- core module ---------------------------------
ns = {'=:        equal?,

      'pr-str:   (a) -> a.map(|s| pr_str(e,true)).join(" ")),
      'str:      (a) -> a.map(|s| pr_str(e,false)).join("")),
      'prn:      (a) -> println(a.map(|s| pr_str(e,true)).join(" ")),
      'println:  (a) -> println(a.map(|s| pr_str(e,false)).join(" ")),

      '<:        lt,
      '<=:       lte,
      '>:        gt,
      '>=:       gte,
      '+:        add,
      '-:        sub,
      '*:        mult,
      '/:        div,

      'list:     list,
      'list?:    list?,

      'empty?:   empty?,
      'count:    count}
