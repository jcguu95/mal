--- step2_eval ----------------------------------
import types, reader, printer

READ(str): return reader.read_str(str)

EVAL(ast, env):
  // prn('EVAL ast)
  match ast:
    'key:                     return env[key] or raise "'{key}' not found"
    [form1 ..]:               return [EVAL(form1, env) ..]
    {key1 value1 ..}:         return {key1 EVAL(value1, env) ..}
    (callable arg1 ..):       f = EVAL(callable, env)
                              args = [EVAL(arg1, env) ..]
                              return f(args)
    otherwise:                return ast

PRINT(exp): return printer.pr_str(exp)

repl_env = {'+: add_fn, ...}
rep(str): return PRINT(EVAL(READ(str),repl_env))

main loop:
  try:      println(rep(readline("user> ")))
  catch e:  println("Error: ", e)
